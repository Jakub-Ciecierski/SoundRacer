package pl.dybisz.testgry.shapes.complex;

import pl.dybisz.testgry.shapes.basic.Obstacle;
import pl.dybisz.testgry.util.animation.ObstacleWorkshopAnimation;

/**
 * Class encapsulates initialization, drawing and animating
 * obstacles on {@link pl.dybisz.testgry.shapes.complex.GameBoard}.
 * Also to safe memory we crate obstacles only once and then translate them.
 * <p></p>
 * Created by dybisz on 2014-12-01.
 */
public class ObstaclesWorkshop {
    /**
     * Array holds all obstacles which are generated by this class.
     */
    private Obstacle[] obstacles = new Obstacle[GameBoard.NUMBER_OF_OBSTACLES];
    /**
     * Refer to {@link pl.dybisz.testgry.util.animation.ObstacleWorkshopAnimation}.
     */
    private ObstacleWorkshopAnimation animation;

    public ObstaclesWorkshop() {
        createObstacles();
        animation = new ObstacleWorkshopAnimation(obstacles);
    }

    /**
     * Goes through list of uninitialized obstacles and initialize them(wow!).
     */
    private void createObstacles() {
        for (int i = 0; i < obstacles.length; i++) {
            obstacles[i] = new Obstacle(GameBoard.LATTICE_GAP_LENGTH,
                    4.0f, GameBoard.LATTICE_GAP_LENGTH, GameBoard.OBSTACLES_COLOR);
        }
    }

    /**
     * Draw obstacles taking into account passed matrix.
     *
     * @param mvpMatrix Matrix for transformations. Commonly we use camera matrix
     *                  for this purpose.
     */
    public void draw(float[] mvpMatrix) {
        for (int i = 0; i < obstacles.length; i++) {
            obstacles[i].draw(mvpMatrix);
        }
    }

    /**
     * Translates all obstacles to fit next animation frame.
     */
    public void switchFrame() {
        if (!animation.equals(null))
            animation.generateNextFrame();
    }
}
